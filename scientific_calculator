from tkinter import *
from math import *
import random
from py_expression_eval import Parser
from fractions import Fraction

#import pyglet
#pyglet.font.add_file('LCDMU___.ttf')

# global vars
# default will be in degrees
memory = 0
mode_state = 1
shift = 0
# cursor beginning coordinates
x = 1.0
y = 60.0
equations_memory = []
eq_no = 0

root = Tk()
root.minsize(360, 712)
root.maxsize(360, 712)
root.title("A scientific Python Calculator using Tkinter")


# use parser for normal expressions, for log sqrt secure eval
def expression_parser(a=""):
    parser = Parser()
    original_expression = e.get(index1=1.0, index2=END).strip()
    equations_memory.append(original_expression)
    result = parser.parse(original_expression).evaluate({})
    #result = parser.evaluate(original_expression, {})
    print(result)
    result_screen.delete(index1=1.0, index2=END)
    result_screen.insert(index=1.0, chars=str(result))
    # align the result to the right
    result_screen.tag_configure("right", justify='right')
    result_screen.tag_add("right", 1.0, "end")


def button_click(number):
    value = e.get(index1=1.0, index2=END)
    if value == "0" and number != ".":
        e.delete(index1=1.0, index2=END)
    current = e.get(END)
    # e.delete(index1=1.0, index2=END)
    e.insert(END, str(current) + str(number))


def ce():
    global list_num
    # list_num = []
    e.delete(index1=1.0, index2=END)
    result_screen.delete(index1=1.0, index2=END)


def memoryplus():
    try:
        value = float(result_screen.get(index1=1.0, index2=END))
    except ValueError:
        return
    value = float(result_screen.get(index1=1.0, index2=END))
    if value >= 1:
        if value / int(value) == 1:
            value = int(value)
    global memory
    memory += value
    # add memory icon
    if memory != 0:
        button_memory.grid(row=0, column=0, sticky=NW)
    result_screen.delete(index1=1.0, index2=END)
    result_screen.insert(END, "0")
    result_screen.tag_configure("right", justify='right')
    result_screen.tag_add("right", 1.0, "end")


def memoryminus():
    try:
        value = float(result_screen.get(index1=1.0, index2=END))
    except ValueError:
        return
    value = float(result_screen.get(index1=1.0, index2=END))
    if value / int(value) == 1:
        value = int(value)
    global memory
    memory -= value
    # add memory icon
    if memory != 0:
        button_memory.grid(row=0, column=0)
    result_screen.delete(index1=1.0, index2=END)
    result_screen.insert(END, "0")
    result_screen.tag_configure("right", justify='right')
    result_screen.tag_add("right", 1.0, "end")


def rclmem():
    global memory
    screen_showing = result_screen.get(index1=1.0, index2=END)
    if screen_showing != "":

        value = float(screen_showing)
        if value == memory:
            memory = 0
            # remove memory icon
            button_memory.grid_forget()

    result_screen.delete(index1=1.0, index2=END)
    result_screen.insert(END, str(memory))
    result_screen.tag_configure("right", justify='right')
    result_screen.tag_add("right", 1.0, "end")


def x1():
    e.insert(END, "TODO")
    print(equations_memory)


def shift_click():
    global shift
    if shift % 2 == 0:
        button_x1.place_forget()
        button_x11.place(x=0, y=210)
        button_ncr.place_forget()
        button_npr.place(x=55, y=210)
        button_mode.place_forget()
        button_clr.place(x=230, y=175)
        button_pol.place_forget()
        button_rec.place(x=230, y=210)
        button_cd.place_forget()
        button_abc.place(x=0, y=245)
        button_powerx.place_forget()
        button_sqrtx.place(x=172, y=245)
        button_log.place_forget()
        button_10x.place(x=230, y=245)
        button_ln.place_forget()
        button_ex.place(x=290, y=245)
        button_degrees.place_forget()
        button_arrowdeg.place(x=55, y=280)
        button_sin.place_forget()
        button_sin1.place(x=172, y=280)
        button_cos.place_forget()
        button_cos1.place(x=230, y=280)
        button_tan.place_forget()
        button_tan1.place(x=290, y=280)
        button_rcl.place_forget()
        button_sto.place(x=0, y=315)
        button_eng.place_forget()
        button_engarrow.place(x=55, y=315)
        button_decimal.grid_forget()
        button_ran.grid(row=10, column=1)
        #removing rnd functionality
        #button_0.grid_forget()
        #button_rnd.grid(row=10, column=0)
        button_exp.grid_forget()
        button_pi.grid(row=10, column=2)
        button_mp.place_forget()
        button_mm.place(x=290, y=315)

    else:
        button_x11.place_forget()
        button_x1.place(x=0, y=210)
        button_npr.place_forget()
        button_ncr.place(x=55, y=210)
        button_clr.place_forget()
        button_mode.place(x=230, y=175)
        button_rec.place_forget()
        button_pol.place(x=230, y=210)
        button_abc.place_forget()
        button_cd.place(x=0, y=245)
        button_sqrtx.place_forget()
        button_powerx.place(x=172, y=245)
        button_10x.place_forget()
        button_log.place(x=230, y=245)
        button_ex.place_forget()
        button_ln.place(x=290, y=245)
        button_arrowdeg.place_forget()
        button_degrees.place(x=55, y=280)
        button_sin1.place_forget()
        button_sin.place(x=172, y=280)
        button_cos1.place_forget()
        button_cos.place(x=230, y=280)
        button_tan1.place_forget()
        button_tan.place(x=290, y=280)
        button_sto.place_forget()
        button_rcl.place(x=0, y=315)
        button_engarrow.place_forget()
        button_eng.place(x=55, y=315)
        button_ran.grid_forget()
        button_decimal.grid(row=10, column=1)
        #button_rnd.grid_forget()
        button_0.grid(row=10, column=0)
        button_pi.grid_forget()
        button_exp.grid(row=10, column=2)
        button_mm.place_forget()
        button_mp.place(x=290, y=315)
    shift += 1


def randomnum():
    result_screen.delete(index1=1.0, index2=END)
    result_screen.insert(END, f"{random.random():.3f}")


# TODO
# bind cursor psn to DEL button
# update y as per entry screen len()
def end_cursor():
    global x, y
    screen_showing = e.get(index1=1.0, index2=END)
    y = len(screen_showing) - 1
    e.mark_set("insert", "%d.%d" % (x, y))


def zero_cursor():
    global x, y
    y = 0
    e.mark_set("insert", "%d.%d" % (x, y))


def move_cursor(arrow):
    global x, y
    if arrow == "◄":
        y -= 1.0
    else:
        y += 1.0
    e.mark_set("insert", "%d.%d" % (x, y))


def delete():
    global x, y
    displaying = e.get(index1=1.0, index2=END)
    if y == 60:
        e.delete(index1=1.0, index2=END)
        e.insert(END, displaying[:-2])
    else:
        e.delete(index1=1.0, index2=END)
        e.insert(END, displaying[:int(y - 1)] + displaying[int(y):].strip())
        y -= 1
        if y <= 0:
            screen_showing = e.get(index1=1.0, index2=END)
            y = len(screen_showing) - 1


def ans():
    displaying = result_screen.get(index1=1.0, index2=END).strip()
    e.delete(index1=1.0, index2=END)
    e.insert(END, displaying)


# use math.log10(num) to find out the x10 then check the number before that
def eng():
    displaying = float((result_screen.get(index1=1.0, index2=END).strip()))
    power10 = floor(log10(displaying))
    result_screen.delete(index1=1.0, index2=END)
    result_screen.insert(END, str(displaying / pow(10, (power10))) + "x10" + get_super(str(power10)))


# function to convert to superscript
def get_super(digit):
    normal_digits = "0123456789+-"
    super_digits = "⁰¹²³⁴⁵⁶⁷⁸⁹⁺⁻"
    result = digit.maketrans(''.join(normal_digits), ''.join(super_digits))
    return digit.translate(result)


# rad degr
def mode():
    global mode_state
    global button_sin
    global button_cos
    global button_tan
    global button_sin1
    global button_cos1
    global button_tan1
    mode_state += 1
    if mode_state % 2 == 0:
        radian = True
        button_radians.grid(row=2, column=4, sticky=E)
        button_sin = Button(root, text="sin", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0,
                            command=lambda: button_click("sin("))
        button_cos = Button(root, text="cos", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0,
                            command=lambda: button_click("cos("))
        button_tan = Button(root, text="tan", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0,
                            command=lambda: button_click("tan("))
        button_sin1 = Button(root, text="asin", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0,
                             command=lambda: button_click("asin("))
        button_cos1 = Button(root, text="acos", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0,
                             command=lambda: button_click("acos("))
        button_tan1 = Button(root, text="atan", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0,
                             command=lambda: button_click("atan("))
        button_sin.grid(row=5, column=3)
        button_cos.grid(row=5, column=4)
        button_tan.grid(row=5, column=5)
    else:
        radian = False
        button_sin.grid_forget()
        button_cos.grid_forget()
        button_tan.grid_forget()
        button_sin1.grid_forget()
        button_cos1.grid_forget()
        button_tan1.grid_forget()
        button_radians.grid_forget()
        button_sin = Button(root, text="sin", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0,
                            command=lambda: button_click("sind("))
        button_cos = Button(root, text="cos", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0,
                            command=lambda: button_click("cosd("))
        button_tan = Button(root, text="tan", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0,
                            command=lambda: button_click("tand("))

        button_sin1 = Button(root, text="asin", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0,
                             command=lambda: button_click("asind("))
        button_cos1 = Button(root, text="acos", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0,
                             command=lambda: button_click("acosd("))
        button_tan1 = Button(root, text="atan", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0,
                             command=lambda: button_click("atand("))
        button_sin.grid(row=5, column=3)
        button_cos.grid(row=5, column=4)
        button_tan.grid(row=5, column=5)


# start with 0 on screen
# e.insert(END, "0")

def eq_memory(step):
    global eq_no
    e.delete(index1=1.0, index2=END)
    e.insert(END, str(equations_memory[-1 - eq_no]))
    eq_no += step
    if eq_no == len(equations_memory):
        eq_no = 0
    elif eq_no<0:
        eq_no=len(equations_memory)-1


def on():
    result_screen.delete(index1=1.0, index2=END)
    result_screen.insert(END, "0")
    result_screen.tag_configure("right", justify='right')
    result_screen.tag_add("right", 1.0, "end")


def cd():
    number=(result_screen.get(index1=1.0, index2=END))
    fraction=Fraction(number).limit_denominator(10000000000)
    if True:
        result_screen.delete(index1=1.0, index2=END)
        result_screen.insert(END,  f"{fraction}")
        result_screen.tag_configure("right", justify='right')
        result_screen.tag_add("right", 1.0, "end")


# Define Buttons
button_1 = Button(root, text="1", font=('Times', '24', 'bold'), borderwidth=5, padx=7, pady=5,
                  command=lambda: button_click(1))
button_2 = Button(root, text="2", font=('Times', '24', 'bold'), borderwidth=5, padx=7, pady=5,
                  command=lambda: button_click(2))
button_3 = Button(root, text="3", font=('Times', '24', 'bold'), borderwidth=5, padx=7, pady=5,
                  command=lambda: button_click(3))
button_4 = Button(root, text="4", font=('Times', '24', 'bold'), borderwidth=5, padx=7, pady=5,
                  command=lambda: button_click(4))
button_5 = Button(root, text="5", font=('Times', '24', 'bold'), borderwidth=5, padx=7, pady=5,
                  command=lambda: button_click(5))
button_6 = Button(root, text="6", font=('Times', '24', 'bold'), borderwidth=5, padx=7, pady=5,
                  command=lambda: button_click(6))
button_7 = Button(root, text="7", font=('Times', '24', 'bold'), borderwidth=5, padx=7, pady=5,
                  command=lambda: button_click(7))
button_8 = Button(root, text="8", font=('Times', '24', 'bold'), borderwidth=5, padx=7, pady=5,
                  command=lambda: button_click(8))
button_9 = Button(root, text="9", font=('Times', '24', 'bold'), borderwidth=5, padx=7, pady=5,
                  command=lambda: button_click(9))
button_0 = Button(root, text="0", font=('Times', '24', 'bold'), borderwidth=5, padx=7, pady=5,
                  command=lambda: button_click(0))

# + - * / . =  clr
button_plus = Button(root, text="+", font=('Times', '12', 'bold'), borderwidth=5, padx=20, pady=20,
                     command=lambda: button_click("+"))
button_minus = Button(root, text="-", font=('Times', '12', 'bold'), borderwidth=5, padx=23, pady=20,
                      command=lambda: button_click("-"))
button_mul = Button(root, text="*", font=('Times', '12', 'bold'), borderwidth=5, padx=20, pady=20,
                    command=lambda: button_click("*"))
button_div = Button(root, text="/", font=('Times', '12', 'bold'), borderwidth=5, padx=23, pady=20,
                    command=lambda: button_click("/"))
button_decimal = Button(root, text=".", font=('Times', '12', 'bold'), borderwidth=5, padx=20, pady=18,
                        command=lambda: button_click("."))
button_equal = Button(root, text="=", font=('Times', '12', 'bold'), borderwidth=5, padx=20, pady=20,
                      command=expression_parser)

# special buttons

button_ac = Button(root, text="AC", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=5, pady=18, command=ce)
button_del = Button(root, text="DEL", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=5, pady=18, command=delete)
button_sqrt = Button(root, text="√", font=('Times', '12'),width=5,  borderwidth=5, padx=0, pady=0,
                     command=lambda: e.insert(END, "sqrt("))
button_mrc = Button(root, text="MC", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=8, command=rclmem)
button_mp = Button(root, text="M+", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=memoryplus)
button_mm = Button(root, text="M-", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=memoryminus)
button_parenth = Button(root, text="(", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                        command=lambda: button_click("("))
button_parenth1 = Button(root, text=")", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                         command=lambda: button_click(")"))
button_sin = Button(root, text="sin", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                    command=lambda: button_click("sind("))
button_cos = Button(root, text="cos", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                    command=lambda: button_click("cosd("))
button_tan = Button(root, text="tan", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                    command=lambda: button_click("tand("))
button_power2 = Button(root, text="x²", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                       command=lambda: button_click("^2"))
button_power3 = Button(root, text="x³", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                       command=lambda: button_click("^3"))
button_shift = Button(root, text="SHIFT", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                      command=shift_click)
button_alpha = Button(root, text="ALPHA", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                      command=expression_parser)
button_mode = Button(root, text="MODE", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=mode)
button_on = Button(root, text="ON", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=on)
button_x1 = Button(root, text="X(-1)", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                   command=lambda: button_click("^(-1)"))
button_x11 = Button(root, text="X!", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                    command=lambda: button_click("fac("))
button_cd = Button(root, text="d/c", font=('Times', '12', 'bold'),width=5, borderwidth=5, padx=0, pady=0, command=cd)
button_minus_parenth = Button(root, text="(-)", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                              command=lambda: button_click("-"))
button_rcl = Button(root, text="RCL", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=rclmem)
button_ncr = Button(root, text="nCr", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=x1)
button_degrees = Button(root, text="º'''", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                        command=lambda: button_click("º"))
button_eng = Button(root, text="ENG", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=eng)
button_hyp = Button(root, text="hyp", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=x1)
button_powerx = Button(root, text="^", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                       command=lambda: button_click("^"))
button_pol = Button(root, text="Pol(", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                    command=lambda: button_click("pol("))
button_log = Button(root, text="log", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                    command=lambda: button_click("log( ,10)"))
button_ln = Button(root, text="ln", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                   command=lambda: button_click("log("))

button_exp = Button(root, text="EXP", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=4, pady=17,
                    command=lambda: button_click("10^"))
button_ans = Button(root, text="Ans", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=5, pady=18,
                    command=lambda: ans())
button_comma = Button(root, text=",", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                      command=lambda: e.insert(END, ","))
button_arrow_l = Button(root, text="◄", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                        command=lambda: move_cursor("◄"))
button_arrow_r = Button(root, text="►", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                        command=lambda: move_cursor("►"))
button_arrow_d = Button(root, text="▼", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                        command=lambda: eq_memory(-1))
button_arrow_u = Button(root, text="▲", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                        command=lambda: eq_memory(1))

# shifted buttons
button_npr = Button(root, text="nPr", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=x1)
button_clr = Button(root, text="CLR", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=x1)
button_rec = Button(root, text="Rec(", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                    command=lambda: button_click("rec("))
button_abc = Button(root, text="ab/c", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=x1)
button_sqrtx = Button(root, text="x√", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=x1)
button_ex = Button(root, text="e^x", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                   command=lambda: button_click("E^"))
button_10x = Button(root, text="10^x", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                    command=lambda: button_click("10^"))
button_arrowdeg = Button(root, text="<-", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=x1)
button_sin1 = Button(root, text="asin", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                     command=lambda: button_click("asind("))
button_cos1 = Button(root, text="acos", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                     command=lambda: button_click("acosd("))
button_tan1 = Button(root, text="atan", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0,
                     command=lambda: button_click("atand("))
button_sto = Button(root, text="STO", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=x1)
button_engarrow = Button(root, text="<-", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=0, pady=0, command=x1)
button_ran = Button(root, text="Ran#", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=3, pady=19,
                    command=lambda: randomnum())
#button_rnd = Button(root, text="Rnd", font=('Times', '12', 'bold'), borderwidth=5, padx=8, pady=20, command=x1)

button_pi = Button(root, text="π", font=('Times', '12', 'bold'),width=5,  borderwidth=5, padx=3, pady=19,
                   command=lambda: button_click("PI"))
# input screen
e = Text(root, background="#d3d3d3", font=('Times', '28', 'bold'), height=2, width=17, borderwidth=10)
e.grid(row=0, column=0, columnspan=10, rowspan=1, padx=10, pady=0)
#set the cursor blinking in input text box
e.focus_set()
# result screen
result_screen = Text(root, background="#d3d3d3", font=('Times', '32', 'bold'), height=1, width=14, borderwidth=10)
result_screen.grid(row=1, column=0, columnspan=10, rowspan=1, padx=10, pady=0)

# Put buttons on the grid
button_1.grid(row=9, column=0)
button_2.grid(row=9, column=1)
button_3.grid(row=9, column=2)
button_4.grid(row=8, column=0)
button_5.grid(row=8, column=1)
button_6.grid(row=8, column=2)
button_7.grid(row=7, column=0)
button_8.grid(row=7, column=1)
button_9.grid(row=7, column=2)
button_0.grid(row=10, column=0)
button_decimal.grid(row=10, column=1)
button_del.grid(row=7, column=3)
button_ac.grid(row=7, column=4)
button_mul.grid(row=8, column=3)
button_div.grid(row=8, column=4)
button_plus.grid(row=9, column=3)
button_minus.grid(row=9, column=4)
button_ans.grid(row=10, column=3)
button_exp.grid(row=10, column=2)
button_equal.grid(row=10, column=4)

#align buttons with grid() under the buttons with place()
canvas=Canvas(root,width=1,height=1)
canvas.grid(row=6, column=0,padx=0,pady=110)

# special keys PLACE()
# row 0
button_shift.place(x=0, y=175)
button_alpha.place(x=55, y=175)
button_arrow_l.place(x=115, y=175)
button_arrow_r.place(x=170, y=175)
button_mode.place(x=230, y=175)
button_on.place(x=290, y=175)
# row 1
button_arrow_d.place(x=115, y=210)
button_arrow_u.place(x=170, y=210)
button_x1.place(x=0, y=210)
button_ncr.place(x=55, y=210)
button_pol.place(x=230, y=210)
button_power3.place(x=290, y=210)
# row 2
button_cd.place(x=0, y=245)
button_sqrt.place(x=55, y=245)
button_power2.place(x=113, y=245)
button_powerx.place(x=172, y=245)
button_log.place(x=230, y=245)
button_ln.place(x=290, y=245)
# row 3
button_minus_parenth.place(x=0, y=280)
button_degrees.place(x=55, y=280)
button_hyp.place(x=113, y=280)
button_sin.place(x=172, y=280)
button_cos.place(x=230, y=280)
button_tan.place(x=290, y=280)
# row 4
button_rcl.place(x=0, y=315)
button_eng.place(x=55, y=315)
button_parenth.place(x=113, y=315)
button_parenth1.place(x=172, y=315)
button_comma.place(x=230, y=315)
button_mp.place(x=290, y=315)

# memory indicator TO refine this indicator
button_memory = Button(root, text="M", font=('Times', '10', 'bold'), background="white", state=DISABLED)
button_radians = Button(root, text="RAD", font=('Times', '10', 'bold'), background="white", state=DISABLED)

# evaluate at ENTER key
root.bind("<KeyPress-Return>", expression_parser)


root.mainloop()


#TODO
#implement all ran# functions
#implement degrees function
#implement reverse dc
#cursor movement using the arrows
#delete and insert at cursor psn
#hyp
#ncr
#rcl function when no number in the result screen
#pol fx
#add ; button in shifted screen
#abc function (fractions)
#CLR func
#rec func
#sto func
#koren X func
#MODE button working only deg/rad
