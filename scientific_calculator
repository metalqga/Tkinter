#not ready yet
#to do
#trigonometry power e.g sin(50)^2
#log, x!, sqrt, degr->radians
#...

import math
from tkinter import *
from math import *
import math

# global vars
#default will be in degrees
if_radians = 0
sign = None
#list_num = []
memory = 0
radian=False

ALLOWED_NAMES = {
    k: v for k, v in math.__dict__.items() if not k.startswith("__")
}

root = Tk()
root.minsize(490, 720)
root.maxsize(490, 720)
root.title("A scientific Python Calculator using Tkinter")


#need to find a way to operate parenthesis
def expression_converter():
    new_expression = ""
    temp_expression = ""
    parenth = False
    original_expression = e.get(index1=1.0, index2=END).strip()

    #radians to degrees dirty hack
    if not radian:
        if "sin(" in original_expression:
            original_expression=original_expression.replace("sin(","sin(radians(")
        if "cos(" in original_expression:
            original_expression=original_expression.replace("cos(","cos(radians(")
        if "tan(" in original_expression:
            original_expression=original_expression.replace("tan(","tan(radians(")

            # # close sin( the parentheses
        iterations = original_expression.count("sin")+original_expression.count("cos")+original_expression.count("tan")
        for i in range(len(original_expression)+iterations-1):
            current_char=original_expression[i]
            if current_char == ")" and original_expression[i-4] in "sincostanradians":
                try:
                    if original_expression[i + 1] != ")" and original_expression[i-1]!=")":
                        # replace exactly this ) with ))
                        original_expression = original_expression[:i] + "))" + original_expression[i + 1:]

                except:
                    original_expression = original_expression[:i] + "))" + original_expression[i + 1:]




#sin^2 not working

    for i in range(len(original_expression)):
        current_el = original_expression[i]
        if current_el not in "(²³^":
            if parenth:
                temp_expression += current_el
            else:
                if original_expression[i-1] != "^":
                    new_expression += current_el
        elif current_el == "(":
            parenth = True
            temp_expression += current_el

        #free numbers on power
        try:
            if not parenth:
                next_symbol = original_expression[i + 1]
                if next_symbol == "²":
                    new_expression = new_expression[:-1]
                    new_expression += f"pow({current_el},2)"
                elif next_symbol == "³":
                    new_expression = new_expression[:-1]
                    new_expression += f"pow({current_el},3)"
                elif next_symbol == "^":
                    new_expression = new_expression[:-1]
                    new_expression += f"pow({current_el},{original_expression[i + 2]})"

        except:
            IndexError("Index error")


        if current_el == ")":
            new_expression += temp_expression
            try:
                next_symbol = original_expression[i + 1]
                if next_symbol == "²":
                    new_expression = new_expression.replace(temp_expression,"")
                    new_expression += f"pow({temp_expression},2)"
                elif next_symbol == "³":
                    new_expression = new_expression.replace(temp_expression,"")
                    new_expression += f"pow({temp_expression},3)"
                elif next_symbol == "^":
                    new_expression = new_expression.replace(temp_expression,"")
                    new_expression += f"pow({temp_expression},{original_expression[i + 2]})"
            except:
                IndexError("Index error")

            temp_expression = ""
            parenth = False
    print(new_expression)
    print(temp_expression)
    return new_expression


def expression_evaluator():
    expression = expression_converter()
    code = compile(expression, "<string>", "eval")
    # Validate allowed names
    for name in code.co_names:
        if name not in ALLOWED_NAMES:
            result_screen.insert(index=1.0, chars="\n" + "Not allowed!")
            raise NameError(f"The use of '{name}' is not allowed")

    result = eval(code, {"__builtins__": {}}, ALLOWED_NAMES)
    result_screen.delete(index1=1.0, index2=END)
    result_screen.insert(index=1.0, chars=str(result))


def button_click(number):
    value = e.get(index1=1.0, index2=END)
    if value == "0" and number != ".":
        e.delete(index1=1.0, index2=END)
    current = e.get(END)
    #e.delete(index1=1.0, index2=END)
    e.insert(END, str(current) + str(number))


def delete():
    displaying = e.get(index1=1.0, index2=END)
    e.delete(index1=1.0, index2=END)
    e.insert(END,displaying[:-2])


def ce():
    global list_num
    #list_num = []
    e.delete(index1=1.0, index2=END)
    result_screen.delete(index1=1.0, index2=END)


def c():
    # del list_num[1]
    e.delete(index1=1.0, index2=END)


def plusminus():
    value = float(e.get(index1=1.0, index2=END))
    try:
        value / int(value)
        if value / int(value) == 1:
            value = int(e.get(index1=1.0, index2=END))
        e.delete(index1=1.0, index2=END)
        e.insert(END, (-value))
    except:
        e.delete(index1=1.0, index2=END)
        e.insert(END, (-value))


def percentage():
    value = float(e.get(index1=1.0, index2=END)) * float(list_num[0]) / 100
    e.delete(index1=1.0, index2=END)
    e.insert(END, (value))


def sqrt1():
    value = sqrt(float(e.get(index1=1.0, index2=END)))
    e.delete(index1=1.0, index2=END)
    e.insert(END, value)


def memoryplus():
    try:
        value = float(result_screen.get(index1=1.0, index2=END))
    except ValueError:
        return
    value = float(result_screen.get(index1=1.0, index2=END))
    if value >=1:
        if value / int(value) == 1:
            value = int(value)
    global memory
    memory += value
    # add memory icon
    if memory != 0:
        button_memory.grid(row=0, column=0)
    result_screen.delete(index1=1.0, index2=END)
    result_screen.insert(END, "0")


def memoryminus():
    try:
        value = float(e.get(index1=1.0, index2=END))
    except ValueError:
        return
    value = float(e.get(index1=1.0, index2=END))
    if value >= 1:
        if value / int(value) == 1:
            value = int(value)
    global memory
    memory -= value
    # add memory icon
    if memory != 0:
        button_memory.grid(row=0, column=0)
    e.delete(index1=1.0, index2=END)
    e.insert(END, "0")


def rclmem():
    global memory
    screen_showing = result_screen.get(index1=1.0, index2=END)
    if screen_showing != "":

        value = float(screen_showing)
        if value == memory:
            memory = 0
            # remove memory icon
            button_memory.grid_forget()
    result_screen.delete(index1=1.0, index2=END)
    result_screen.insert(END, memory)


def parenth_command():
    e.insert(END, "(")


def parenth_command1():
    e.insert(END, ")")


def sin():
    e.insert(END, "sin(")


def cos():
    e.insert(END, "cos(")


def tan():
    e.insert(END, "tan(")


def power2():
    e.insert(END, "²")


def power3():
    e.insert(END, "³")


def powerx():
    e.insert(END, "^")

#start with 0 on screen
#e.insert(END, "0")

# Define Buttons
button_1 = Button(root, text="1", font=('Times', '24', 'bold'), borderwidth=5, padx=1, pady=1,
                  command=lambda: button_click(1))
button_2 = Button(root, text="2", font=('Times', '24', 'bold'), borderwidth=5, padx=1, pady=1,
                  command=lambda: button_click(2))
button_3 = Button(root, text="3", font=('Times', '24', 'bold'), borderwidth=5, padx=1, pady=1,
                  command=lambda: button_click(3))
button_4 = Button(root, text="4", font=('Times', '24', 'bold'), borderwidth=5, padx=1, pady=1,
                  command=lambda: button_click(4))
button_5 = Button(root, text="5", font=('Times', '24', 'bold'), borderwidth=5, padx=1, pady=1,
                  command=lambda: button_click(5))
button_6 = Button(root, text="6", font=('Times', '24', 'bold'), borderwidth=5, padx=1, pady=1,
                  command=lambda: button_click(6))
button_7 = Button(root, text="7", font=('Times', '24', 'bold'), borderwidth=5, padx=1, pady=1,
                  command=lambda: button_click(7))
button_8 = Button(root, text="8", font=('Times', '24', 'bold'), borderwidth=5, padx=1, pady=1,
                  command=lambda: button_click(8))
button_9 = Button(root, text="9", font=('Times', '24', 'bold'), borderwidth=5, padx=1, pady=1,
                  command=lambda: button_click(9))
button_0 = Button(root, text="0", font=('Times', '24', 'bold'), borderwidth=5, padx=1, pady=1,
                  command=lambda: button_click(0))

# + - * / . =  clr
button_plus = Button(root, text="+", font=('Times', '12', 'bold'), borderwidth=5, padx=20, pady=20, command=lambda: button_click("+"))
button_minus = Button(root, text="-", font=('Times', '12', 'bold'), borderwidth=5, padx=23, pady=20, command=lambda: button_click("-"))
button_mul = Button(root, text="*", font=('Times', '12', 'bold'), borderwidth=5, padx=20, pady=20, command=lambda: button_click("*"))
button_div = Button(root, text="/", font=('Times', '12', 'bold'), borderwidth=5, padx=23, pady=20, command=lambda: button_click("/"))
button_decimal = Button(root, text=".", font=('Times', '12', 'bold'), borderwidth=5, padx=23, pady=20,
                        command=lambda: button_click("."))
button_equal = Button(root, text="=", font=('Times', '12', 'bold'), borderwidth=5, padx=20, pady=20,
                      command=expression_evaluator)
# button_clear = Button(root, text = "CLR", font=('Times', '18', 'bold'), borderwidth=5, padx=5, pady=5, command=clear)

# sqrt, mrc, m- m+ % +/- C AC
button_c = Button(root, text="C", font=('Times', '12', 'bold'), borderwidth=5, padx=22, pady=20, command=c)
button_ac = Button(root, text="AC", font=('Times', '12', 'bold'), borderwidth=5, padx=12, pady=20, command=ce)
button_del = Button(root, text="DEL", font=('Times', '12', 'bold'), borderwidth=5, padx=10, pady=15, command=delete)
button_sqrt = Button(root, text="√", font=('Times', '12'), borderwidth=5, padx=26, pady=8, command=sqrt1)
button_percent = Button(root, text="%", font=('Times', '12', 'bold'), borderwidth=5, padx=18, pady=18,
                        command=percentage)
button_mrc = Button(root, text="MC", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=8, command=rclmem)
button_mm = Button(root, text="M-", font=('Times', '12', 'bold'), borderwidth=5, padx=10, pady=8, command=memoryminus)
button_mp = Button(root, text="M+", font=('Times', '12', 'bold'), borderwidth=5, padx=4, pady=8, command=memoryplus)
button_plusminus = Button(root, text="+/-", font=('Times', '12', 'bold'), borderwidth=5, padx=14, pady=20,
                          command=plusminus)

#special buttons



button_parenth = Button(root, text="(", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=parenth_command)
button_parenth1 = Button(root, text=")", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=parenth_command1)
button_sin = Button(root, text="sin", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=sin)
button_cos = Button(root, text="cos", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=cos)
button_tan = Button(root, text="tan", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=tan)
button_power2 = Button(root, text="x²", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power2)
button_power3 = Button(root, text="x³", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_shift = Button(root, text="SHIFT", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_alpha = Button(root, text="ALPHA", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)


button_mode = Button(root, text="MODE", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_on = Button(root, text="ON", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_x1 = Button(root, text="X(-1)", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_cd = Button(root, text="C-D", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_minus_parenth = Button(root, text="(-)", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_rcl = Button(root, text="RCL", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_ncr = Button(root, text="nCr", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_degrees = Button(root, text="º'''", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_eng = Button(root, text="ENG", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_hyp = Button(root, text="hyp", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_powerx = Button(root, text="^", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=powerx)
button_pol = Button(root, text="Pol(", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_log = Button(root, text="log", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_ln = Button(root, text="ln", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_pi = Button(root, text="π", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_ans = Button(root, text="Ans", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=expression_converter)
button_comma = Button(root, text=",", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_arrow_l = Button(root, text="<", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)
button_arrow_r = Button(root, text=">", font=('Times', '12', 'bold'), borderwidth=5, padx=0, pady=0, command=power3)

# screens
e = Text(root, background="#d3d3d3", font=('Times', '28', 'bold'), height=2, width=23, borderwidth=10)
e.grid(row=0, column=0, columnspan=10, rowspan=1, padx=10, pady=0)

result_screen = Text(root, background="#d3d3d3", font=('Times', '28', 'bold'), height=2, width=23, borderwidth=10)
result_screen.grid(row=1, column=0, columnspan=10, rowspan=1, padx=10, pady=0)


# Put buttons on screen
button_1.grid(row=9, column=0)
button_2.grid(row=9, column=1)
button_3.grid(row=9, column=2)
button_4.grid(row=8, column=0)
button_5.grid(row=8, column=1)
button_6.grid(row=8, column=2)
button_7.grid(row=7, column=0)
button_8.grid(row=7, column=1)
button_9.grid(row=7, column=2)
button_0.grid(row=10, column=0)
button_decimal.grid(row=10, column=1)
button_del.grid(row=7, column=3)
button_ac.grid(row=7, column=4)
button_mul.grid(row=8, column=3)
button_div.grid(row=8, column=4)
button_plus.grid(row=9, column=3)
button_minus.grid(row=9, column=4)
button_ans.grid(row=10, column=3)
button_equal.grid(row=10, column=4)

#button_percent.grid(row=2, column=0)
#button_plusminus.grid(row=3, column=0)
#button_c.grid(row=4, column=0)
#button_mrc.grid(row=6, column=1)
#button_mm.grid(row=6, column=5)
#button_mp.grid(row=6, column=3)

#special keys
#row 0
button_shift.grid(row=2, column=0)
button_alpha.grid(row=2, column=1)
button_arrow_l.grid(row=2, column=2)
button_arrow_r.grid(row=2, column=3)
button_mode.grid(row=2, column=4)
button_on.grid(row=2, column=5)
#row 1
button_x1.grid(row=3, column=0)
button_ncr.grid(row=3, column=1)
button_pol.grid(row=3, column=4)
button_power3.grid(row=3, column=5)
#row 2
button_cd.grid(row=4, column=0)
button_sqrt.grid(row=4, column=1)
button_power2.grid(row=4, column=2)
button_powerx.grid(row=4, column=3)
button_log.grid(row=4, column=4)
button_ln.grid(row=4, column=5)
#row 3
button_minus_parenth.grid(row=5, column=0)
button_degrees.grid(row=5, column=1)
button_hyp.grid(row=5, column=2)
button_sin.grid(row=5, column=3)
button_cos.grid(row=5, column=4)
button_tan.grid(row=5, column=5)
#row 4
button_rcl.grid(row=6, column=0)
button_eng.grid(row=6, column=1)
button_parenth.grid(row=6, column=2)
button_parenth1.grid(row=6, column=3)
button_comma.grid(row=6, column=4)
button_mp.grid(row=6, column=5)


# memory indicator
button_memory = Button(root, text="M", font=('Times', '10', 'bold'), background="white", state=DISABLED)

root.mainloop()
